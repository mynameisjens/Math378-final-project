---
title: "Jensen's Math378 Final project"
---

---
title: "Penguins EDA"
format:
  html:
    code-fold: true
---

## Penguin Size and Mass by Sex and Species

```{r}
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(dbplyr)
library(log4r)

df <- palmerpenguins::penguins 
#con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
#DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
#DBI::dbDisconnect(con, shutdown = TRUE)

con <- DBI::dbConnect(
  duckdb::duckdb(), 
  dbdir = "my-db.duckdb"
  )
df <- dplyr::tbl(con, "penguins")
#DBI::dbDisconnect(con)

```

```{r}
#df %>%
  #group_by(species, sex) %>%
  #summarise(
    #across(
      #where(is.numeric), 
      #\(x) mean(x, na.rm = TRUE)
      #)
    #) %>%
  #knitr::kable()
```

## Penguin Size vs Mass by Species

```{r}
df %>%
  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
  geom_point() + 
  geom_smooth(method = "lm")

```

## Build Shiny app

```{r}
#library(shiny)

#api_url <- "http://127.0.0.1:8080/predict"

#ui <- fluidPage(
  #titlePanel("Penguin Mass Predictor"),

  # Model input values
  #sidebarLayout(
    #sidebarPanel(
      #sliderInput(
        #"bill_length",
        #"Bill Length (mm)",
        #min = 30,
        #max = 60,
        #value = 45,
        #step = 0.1
      #),
      #selectInput(
        #"sex",
        #"Sex",
        #c("Male", "Female")
      #),
      #selectInput(
        #"species",
        #"Species",
        #c("Adelie", "Chinstrap", "Gentoo")
      #),
      # Get model predictions
      #actionButton(
        #"predict",
        #"Predict"
      #)
    #),

    #mainPanel(
      #h2("Penguin Parameters"),
      #verbatimTextOutput("vals"),
      #h2("Predicted Penguin Mass (g)"),
      #textOutput("pred")
    #)
  #)
#)

#server <- function(input, output) {
  # Input params
  #vals <- reactive(
    #list(
      #bill_length_mm = input$bill_length,
      #species_Chinstrap = input$species == "Chinstrap",
      #species_Gentoo = input$species == "Gentoo",
      #sex_male = input$sex == "Male"
    #)
  #)

  # Fetch prediction from API
  #pred <- eventReactive(
    #input$predict,
    #httr2::request(api_url) |>
      #httr2::req_body_json(list(vals())) |>
      #httr2::req_perform() |>
      #httr2::resp_body_json(),
    #ignoreInit = TRUE
  #)

  # Render to UI
  #output$pred <- renderText(pred()$predict[[1]])
  #output$vals <- renderPrint(vals())
#}

# Run the application
#shinyApp(ui = ui, server = server)

```

```{r}
#server <- function(input, output) {
 # log <- log4r::logger()
  #log4r::info(log, "App Started")
  # Input params
  #vals <- reactive(
   # list(
    #  bill_length_mm = input$bill_length,
     # species_Chinstrap = input$species == "Chinstrap",
      #species_Gentoo = input$species == "Gentoo",
      #sex_male = input$sex == "Male"
    #)
  #)

  # Fetch prediction from API
  #pred <- eventReactive(
   # input$predict,
    #{
     # log4r::info(log, "Prediction Requested")
      #r <- httr2::request(api_url) |>
       # httr2::req_body_json(list(vals())) |>
        #httr2::req_perform()
      #log4r::info(log, "Prediction Returned")

      #if (httr2::resp_is_error(r)) {
       # log4r::error(log, paste("HTTP Error"))
      #}

      #httr2::resp_body_json(r)
    #},
    #ignoreInit = TRUE
  #)

  # Render to UI
  #output$pred <- renderText(pred()$predict[[1]])
  #output$vals <- renderPrint(vals())
#}
```

```{r}
DBI::dbDisconnect(con, shutdown = TRUE) 
```
