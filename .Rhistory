install.packages("palmerpenguins", "dplyr", "ggplot2")
install.packages("palmerpenguins")
install.packages("dplyr")
install.packages("ggplot2")
renv::snapshot()
renv::snapshot()
python -m venv .venv
python -m venv .venv
reticulate::repl_python()
con.close()
quit
DBI::dbDisconnect(con, shutdown = TRUE)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(dbplyr)
library(log4r)
df <- palmerpenguins::penguins
#con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
#DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
#DBI::dbDisconnect(con, shutdown = TRUE)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
#DBI::dbDisconnect(con)
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
DBI::dbDisconnect(con, shutdown = TRUE)
#library(reticulate)
#py_config()
#use_python(".venv/Scripts/python.exe")
#use_virtualenv(".venv")
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import VetiverAPI
from vetiver import vetiver_pin_write
from pins import board_folder
import duckdb
df = penguins.load_penguins().dropna()
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
df.head(5)
#con.close()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b,v)
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
import requests
req_data = {
"bill_length_mm": 0,
"species_Chinstrap": False,
"species_Gentoo": False,
"sex_male": False
}
req = requests.post('http://127.0.0.1:8080/predict', json = [req_data])
res = req.json().get('predict')[0]
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
import logging
logging.basicConfig(
format='%(asctime)s - %(message)s',
level=logging.INFO
)
def server(input, output, session):
logging.info("App start")
@reactive.Calc
def vals():
d = {
"bill_length_mm" : input.bill_length(),
"sex_male" : input.sex() == "Male",
"species_Gentoo" : input.species() == "Gentoo",
"species_Chinstrap" : input.species() == "Chinstrap"
}
return d
@reactive.Calc
@reactive.event(input.predict)
def pred():
logging.info("Request Made")
r = requests.post(api_url, json = [vals()])
logging.info("Request Returned")
if r.status_code != 200:
logging.error("HTTP error returned")
return r.json().get('predict')[0]
@output
@render.text
def vals_out():
return f"{vals()}"
@output
@render.text
def pred_out():
return f"{round(pred())}"
con.close()
con.close()
quit
DBI::dbDisconnect(con, shutdown = TRUE)
df %>%
group_by(species, sex) %>%
summarise(
across(
.cols = where(is.numeric),
.fns = mean,
na.rm = TRUE
)
) %>%
knitr::kable()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(dbplyr)
#library(log4r)
df <- palmerpenguins::penguins
#con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
#DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
#DBI::dbDisconnect(con, shutdown = TRUE)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
#DBI::dbDisconnect(con)
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(dbplyr)
#library(log4r)
df <- palmerpenguins::penguins
#con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
#DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
#DBI::dbDisconnect(con, shutdown = TRUE)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
DBI::dbDisconnect(con, shutdown = TRUE)
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(dbplyr)
#library(log4r)
df <- palmerpenguins::penguins
#con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
#DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
#DBI::dbDisconnect(con, shutdown = TRUE)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
#DBI::dbDisconnect(con)
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
renv::snapshot()
DBI::dbDisconnect(con, shutdown = TRUE)
reticulate::repl_python()
con.close()
quit
DBI::dbDisconnect(con, shutdown = TRUE)
reticulate::repl_python()
con.close()
quit
DBI::dbDisconnect(con, shutdown = TRUE)
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
df %>%
group_by(species, sex) %>%
summarise(
across(
.cols = where(is.numeric),
.fns = mean,
na.rm = TRUE
)
) %>%
knitr::kable()
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
library(palmerpenguins)
library(dplyr)
library(ggplot2)
library(DBI)
library(dbplyr)
library(log4r)
df <- palmerpenguins::penguins
#con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
#DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
#DBI::dbDisconnect(con, shutdown = TRUE)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
#DBI::dbDisconnect(con)
df %>%
group_by(species, sex) %>%
summarise(
across(
where(is.numeric),
\(x) mean(x, na.rm = TRUE)
)
) %>%
knitr::kable()
server <- function(input, output) {
log <- log4r::logger()
log4r::info(log, "App Started")
# Input params
vals <- reactive(
list(
bill_length_mm = input$bill_length,
species_Chinstrap = input$species == "Chinstrap",
species_Gentoo = input$species == "Gentoo",
sex_male = input$sex == "Male"
)
)
# Fetch prediction from API
pred <- eventReactive(
input$predict,
{
log4r::info(log, "Prediction Requested")
r <- httr2::request(api_url) |>
httr2::req_body_json(list(vals())) |>
httr2::req_perform()
log4r::info(log, "Prediction Returned")
if (httr2::resp_is_error(r)) {
log4r::error(log, paste("HTTP Error"))
}
httr2::resp_body_json(r)
},
ignoreInit = TRUE
)
# Render to UI
output$pred <- renderText(pred()$predict[[1]])
output$vals <- renderPrint(vals())
}
DBI::dbDisconnect(con, shutdown = TRUE)
#library(reticulate)
#py_config()
#use_python(".venv/Scripts/python.exe")
#use_virtualenv(".venv")
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from vetiver import VetiverAPI
from vetiver import vetiver_pin_write
from vetiver import prepare_docker
from pins import board_folder
import duckdb
df = penguins.load_penguins().dropna()
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
#con.close()
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b,v)
v = VetiverModel.from_pin(b, 'penguin_model', version = '20240306T192302Z-a6f9b')
app = VetiverAPI(v, check_prototype=True)
#app.run(port = 8080)
import vetiver
model_board = "C:/Users/C25Jensen.Garcia/Documents/2023-2024/Fall semester/Math 378/Jensen's Math378 Final project"
vetiver.prepare_docker(b, "penguin_model")
con.close()
git init
